<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graphs in AQL on ArangoDB Documentation</title><link>http://localhost/3.11/aql/graphs/</link><description>Recent content in Graphs in AQL on ArangoDB Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://localhost/3.11/aql/graphs/index.xml" rel="self" type="application/rss+xml"/><item><title>AQL graph traversals explained</title><link>http://localhost/3.11/aql/graphs/traversals-explained/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/aql/graphs/traversals-explained/</guid><description>General query idea A traversal starts at one specific document (startVertex) and follows all edges connected to this document. For all documents (vertices) that are targeted by these edges it will again follow all edges connected to them and so on. It is possible to define how many of these follow iterations should be executed at least (min depth) and at most (max depth).
For all vertices that were visited during this process in the range between min depth and max depth iterations you will get a result in form of a set with three items:</description></item><item><title>Graph traversals in AQL</title><link>http://localhost/3.11/aql/graphs/traversals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/aql/graphs/traversals/</guid><description>Syntax There are two slightly different syntaxes for traversals in AQL, one for
named graphs and another to specify a set of edge collections (anonymous graph). Working with named graphs The syntax for AQL graph traversals using named graphs is as follows (square brackets denote optional parts and | denotes alternatives):
FOR vertex[, edge[, path]] IN [min[..max]] OUTBOUND|INBOUND|ANY startVertex GRAPH graphName [PRUNE [pruneVariable = ]pruneCondition] [OPTIONS options] FOR: emits up to three variables:</description></item><item><title>Shortest Path in AQL</title><link>http://localhost/3.11/aql/graphs/shortest-path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/aql/graphs/shortest-path/</guid><description>General query idea This type of query finds the shortest path between two given documents (startVertex and targetVertex) in your graph. If there are multiple shortest paths, the path with the lowest weight or a random one (in case of a tie) is returned.
The shortest path search emits the following two variables for every step of the path:
The vertex on this path. The edge pointing to it. Example execution Let&amp;rsquo;s take a look at a simple example to explain how it works.</description></item><item><title>All Shortest Paths in AQL</title><link>http://localhost/3.11/aql/graphs/all-shortest-paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/aql/graphs/all-shortest-paths/</guid><description>General query idea This type of query finds all paths of shortest length between two given documents (startVertex and targetVertex) in your graph.
Every returned path is a JSON object with two attributes:
An array containing the vertices on the path. An array containing the edges on the path. Example
A visual representation of the example graph:
Each ellipse stands for a train station with the name of the city written inside of it.</description></item><item><title>k Shortest Paths in AQL</title><link>http://localhost/3.11/aql/graphs/k-shortest-paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/aql/graphs/k-shortest-paths/</guid><description>General query idea This type of query finds the first k paths in order of length (or weight) between two given documents (startVertex and targetVertex) in your graph.
Every such path is returned as a JSON object with three components:
an array containing the vertices on the path an array containing the edges on the path the weight of the path, that is the sum of all edge weights If no weightAttribute is specified, the weight of the path is just its length.</description></item><item><title>k Paths in AQL</title><link>http://localhost/3.11/aql/graphs/k-paths/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://localhost/3.11/aql/graphs/k-paths/</guid><description>General query idea This type of query finds all paths between two given documents (startVertex and targetVertex) in your graph. The paths are restricted by a minimum and maximum length that you specify.
Every such path is returned as a JSON object with two components:
an array containing the vertices on the path an array containing the edges on the path Example
Here is an example graph to explain how the k Paths algorithm works:</description></item></channel></rss>